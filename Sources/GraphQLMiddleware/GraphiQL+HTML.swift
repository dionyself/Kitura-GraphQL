let graphiqlHTML="<!--\nThe request to this GraphQL server provided the header \"Accept: text/html\"\nand as a result has been presented GraphiQL - an in-browser IDE for\nexploring GraphQL.\nIf you wish to receive JSON, provide the header \"Accept: application/json\" or\nadd \"&raw\" to the end of the URL within a browser.\n-->\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\" />\n<title>GraphiQL</title>\n<meta name=\"robots\" content=\"noindex\" />\n<style>\nhtml, body {\nheight: 100%;\nmargin: 0;\noverflow: hidden;\nwidth: 100%;\n}\n</style>\n<link href=\"//cdn.jsdelivr.net/graphiql/0.8.0/graphiql.css\" rel=\"stylesheet\" />\n<script src=\"//cdn.jsdelivr.net/fetch/0.9.0/fetch.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/react/15.3.2/react.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/react/15.3.2/react-dom.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/graphiql/0.8.0/graphiql.min.js\"></script>\n</head>\n<body>\n<script>\n// Collect the URL parameters\nvar parameters = {};\nwindow.location.search.substr(1).split(\"&\").forEach(function (entry) {\nvar eq = entry.indexOf(\"=\");\nif (eq >= 0) {\nparameters[decodeURIComponent(entry.slice(0, eq))] =\ndecodeURIComponent(entry.slice(eq + 1));\n}\n});\n// Produce a Location query string from a parameter object.\nfunction locationQuery(params) {\nreturn \"?\" + Object.keys(params).map(function (key) {\nreturn encodeURIComponent(key) + \"=\" +\nencodeURIComponent(params[key]);\n}).join(\"&\");\n}\n// Derive a fetch URL from the current URL, sans the GraphQL parameters.\nvar graphqlParamNames = {\nquery: true,\nvariables: true,\noperationName: true\n};\nvar otherParams = {};\nfor (var k in parameters) {\nif (parameters.hasOwnProperty(k) && graphqlParamNames[k] !== true) {\notherParams[k] = parameters[k];\n}\n}\nvar fetchURL = locationQuery(otherParams);\n// Defines a GraphQL fetcher using the fetch API.\nfunction graphQLFetcher(graphQLParams) {\nreturn fetch(fetchURL, {\nmethod: \"post\",\nheaders: {\n\"Accept\": \"application/json\",\n\"Content-Type\": \"application/json\"\n},\nbody: JSON.stringify(graphQLParams),\ncredentials: \"include\",\n}).then(function (response) {\nreturn response.text();\n}).then(function (responseBody) {\ntry {\nreturn JSON.parse(responseBody);\n} catch (error) {\nreturn responseBody;\n}\n});\n}\n// When the query and variables string is edited, update the URL bar so\n// that it can be easily shared.\nfunction onEditQuery(newQuery) {\nparameters.query = newQuery;\nupdateURL();\n}\nfunction onEditVariables(newVariables) {\nparameters.variables = newVariables;\nupdateURL();\n}\nfunction onEditOperationName(newOperationName) {\nparameters.operationName = newOperationName;\nupdateURL();\n}\nfunction updateURL() {\nhistory.replaceState(null, null, locationQuery(parameters));\n}\n// Render <GraphiQL /> into the body.\nReactDOM.render(\nReact.createElement(GraphiQL, {\nfetcher: graphQLFetcher,\nonEditQuery: onEditQuery,\nonEditVariables: onEditVariables,\nonEditOperationName: onEditOperationName,\nquery: %@,\nresponse: %@,\nvariables: %@,\noperationName: %@,\n}),\ndocument.body\n);\n</script>\n</body>\n"
